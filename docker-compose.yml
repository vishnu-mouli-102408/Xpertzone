services:
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
      target: development
    container_name: web-xpertzone
    working_dir: /app
    env_file:
      - packages/db/.env
      - packages/cache/.env
    ports:
      - "3000:3000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["pnpm", "run", "dev:docker"]
    develop:
      watch:
        - action: sync
          path: ./
          target: /app
          ignore:
            - node_modules/
            - .turbo/
            - dist/
        - action: rebuild
          path: package.json

  db:
    image: postgres:alpine
    container_name: db-xpertzone
    restart: always
    env_file:
      - packages/db/.env
    ports:
      - 5432:5432
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:alpine
    container_name: redis-xpertzone
    restart: always
    env_file:
      - packages/cache/.env
    command: ["redis-server", "--appendonly", "yes"]
    ports:
      - 6379:6379
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres-data:
    external: false
  redis-data:
    external: false
